#!/usr/bin/env python3

import logging
import argparse

from nagios_result_bridge import start_listening


class LoggerHandlerAction(argparse.Action):
    def __init__(self,
                 option_strings,
                 dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS,
                 help=None):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            default=default,
            nargs=0,
            help=help,
        )


class SyslogLoggerAction(LoggerHandlerAction):
    def __call__(self, parser, namespace, values, option_string=None):
        logging.basicConfig(
            handlers=[logging.handlers.SysLogHandler(address='/dev/log')],
            format='%(message)s',
        )


class JournalLoggerAction(LoggerHandlerAction):
    def __call__(self, parser, namespace, values, option_string=None):
        try:
            from systemd.journal import JournalHandler
        except ImportError:
            raise argparse.ArgumentError(self, 'needs python-systemd')

        logging.basicConfig(
            handlers=[JournalHandler(SYSLOG_IDENTIFIER=parser.prog)],
            format='%(message)s',
        )


parser = argparse.ArgumentParser()
parser.add_argument(
    '--cmdfile',
    help='Nagios external command file',
    type=argparse.FileType('wb', 0),
    default='/var/lib/nagios3/rw/nagios.cmd',
)
parser.add_argument(
    '--port',
    help='TCP port to listen on',
    type=int,
    default=7995,
)
parser.add_argument(
    '--log-level',
    help='Filter log messages by level',
    default='warning',
)

loghandler_group = parser.add_mutually_exclusive_group()
loghandler_group
loghandler_group.add_argument(
    '--syslog',
    help='Use syslog for logging',
    action=JournalLoggerAction,
)
loghandler_group.add_argument(
    '--journald',
    help='Use systemd journal for logging',
    action=JournalLoggerAction,
)

args = parser.parse_args()
logging.basicConfig()
logging.root.setLevel(getattr(logging, args.log_level.upper()))
start_listening(args.port, args.cmdfile)
